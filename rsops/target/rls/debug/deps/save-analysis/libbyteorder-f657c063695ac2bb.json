{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3","program":"C:\\Users\\Administrator\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","byteorder","C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","-C","metadata=f657c063695ac2bb","-C","extra-filename=-f657c063695ac2bb","--out-dir","e:\\rustproject\\rsops\\target\\rls\\debug\\deps","-L","dependency=e:\\rustproject\\rsops\\target\\rls\\debug\\deps","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\Administrator\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"e:\\rustproject\\rsops\\target\\rls\\debug\\deps\\libbyteorder-f657c063695ac2bb.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[14462599008788165282,8476289195452186810]},"crate_root":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src","external_crates":[{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[1921591330338517602,8002743023817837766]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[3294562336267099064,32966444439847392]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8997478989526601172,15466949633016966289]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[2630917957276446109,8658156290826251556]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[16592919627580665262,9528133364691589515]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[12745094628986209607,10518202857406436678]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[12421643217715303902,5448498891032173630]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[10471275659107711445,16777480585464664117]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[5556840401016198219,10246883469141694681]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[5351773000290944944,5461204872568622329]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[1406896991597352872,16715998803959789672]}},{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","num":12,"id":{"name":"panic_unwind","disambiguator":[16017799561494711091,10322761666972095232]}}],"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":0,"byte_end":27395,"line_start":1,"line_end":802,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":1511,"byte_end":1523,"line_start":53,"line_end":53,"column_start":15,"column_end":27},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":1525,"byte_end":1538,"line_start":53,"line_end":53,"column_start":29,"column_end":42},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":0,"byte_end":27395,"line_start":1,"line_end":802,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":116},{"krate":0,"index":127}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","sig":null,"attributes":[{"value":"*\nThis crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.\n\nThe organization of the crate is pretty simple. A trait, `ByteOrder`, specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, `BigEndian`\nand `LittleEndian` implement these methods. Finally, `ReadBytesExt` and\n`WriteBytesExt` provide convenience methods available to all types that\nimplement `Read` and `Write`.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read` type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a `Write` type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n*/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":0,"byte_end":1199,"line_start":1,"line_end":37,"column_start":1,"column_end":3}},{"value":"crate_name = \"byteorder\"","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":1201,"byte_end":1229,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":1342,"byte_end":1364,"line_start":44,"line_end":44,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":14},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28101,"byte_end":28113,"line_start":23,"line_end":23,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::new::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46}],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends `Read` with methods for reading numbers. (For `std::io`.)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27443,"byte_end":27512,"line_start":5,"line_end":5,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27513,"byte_end":27516,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27517,"byte_end":27595,"line_start":7,"line_end":7,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27596,"byte_end":27674,"line_start":8,"line_end":8,"column_start":1,"column_end":79}},{"value":"/ the `BigEndian` or `LittleEndian` types defined in this crate.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27675,"byte_end":27741,"line_start":9,"line_end":9,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27742,"byte_end":27745,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27746,"byte_end":27760,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27761,"byte_end":27764,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Read unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27765,"byte_end":27824,"line_start":13,"line_end":13,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27825,"byte_end":27828,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27829,"byte_end":27840,"line_start":15,"line_end":15,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27841,"byte_end":27865,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27866,"byte_end":27911,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27912,"byte_end":27915,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27916,"byte_end":27964,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":27965,"byte_end":28023,"line_start":20,"line_end":20,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28024,"byte_end":28082,"line_start":21,"line_end":21,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28083,"byte_end":28090,"line_start":22,"line_end":22,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":15},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28350,"byte_end":28357,"line_start":29,"line_end":29,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::new::ReadBytesExt::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 8 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28130,"byte_end":28193,"line_start":24,"line_end":24,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28198,"byte_end":28201,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28206,"byte_end":28277,"line_start":26,"line_end":26,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28282,"byte_end":28328,"line_start":27,"line_end":27,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28333,"byte_end":28342,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28703,"byte_end":28710,"line_start":40,"line_end":40,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::new::ReadBytesExt::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 8 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28486,"byte_end":28546,"line_start":35,"line_end":35,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28551,"byte_end":28554,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28559,"byte_end":28630,"line_start":37,"line_end":37,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28635,"byte_end":28681,"line_start":38,"line_end":38,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28686,"byte_end":28695,"line_start":39,"line_end":39,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28931,"byte_end":28939,"line_start":48,"line_end":48,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::new::ReadBytesExt::read_u16","value":"pub fn read_u16<T: ByteOrder>(&mut Self) -> Result<u16>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28845,"byte_end":28909,"line_start":46,"line_end":46,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28914,"byte_end":28923,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29177,"byte_end":29185,"line_start":56,"line_end":56,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::new::ReadBytesExt::read_i16","value":"pub fn read_i16<T: ByteOrder>(&mut Self) -> Result<i16>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29094,"byte_end":29155,"line_start":54,"line_end":54,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29160,"byte_end":29169,"line_start":55,"line_end":55,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29426,"byte_end":29434,"line_start":64,"line_end":64,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::new::ReadBytesExt::read_u32","value":"pub fn read_u32<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29340,"byte_end":29404,"line_start":62,"line_end":62,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29409,"byte_end":29418,"line_start":63,"line_end":63,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29672,"byte_end":29680,"line_start":72,"line_end":72,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::new::ReadBytesExt::read_i32","value":"pub fn read_i32<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29589,"byte_end":29650,"line_start":70,"line_end":70,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29655,"byte_end":29664,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29921,"byte_end":29929,"line_start":80,"line_end":80,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::new::ReadBytesExt::read_u64","value":"pub fn read_u64<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29835,"byte_end":29899,"line_start":78,"line_end":78,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":29904,"byte_end":29913,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30167,"byte_end":30175,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::new::ReadBytesExt::read_i64","value":"pub fn read_i64<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30084,"byte_end":30145,"line_start":86,"line_end":86,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30150,"byte_end":30159,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30417,"byte_end":30426,"line_start":96,"line_end":96,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::new::ReadBytesExt::read_uint","value":"pub fn read_uint<T: ByteOrder>(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30330,"byte_end":30395,"line_start":94,"line_end":94,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30400,"byte_end":30409,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30709,"byte_end":30717,"line_start":104,"line_end":104,"column_start":8,"column_end":16},"name":"read_int","qualname":"::new::ReadBytesExt::read_int","value":"pub fn read_int<T: ByteOrder>(&mut Self, usize) -> Result<i64>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30625,"byte_end":30687,"line_start":102,"line_end":102,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30692,"byte_end":30701,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31041,"byte_end":31049,"line_start":113,"line_end":113,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::new::ReadBytesExt::read_f32","value":"pub fn read_f32<T: ByteOrder>(&mut Self) -> Result<f32>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number from","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30915,"byte_end":30988,"line_start":110,"line_end":110,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":30993,"byte_end":31019,"line_start":111,"line_end":111,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31024,"byte_end":31033,"line_start":112,"line_end":112,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31330,"byte_end":31338,"line_start":122,"line_end":122,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::new::ReadBytesExt::read_f64","value":"pub fn read_f64<T: ByteOrder>(&mut Self) -> Result<f64>","parent":{"krate":0,"index":14},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number from","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31204,"byte_end":31277,"line_start":119,"line_end":119,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31282,"byte_end":31308,"line_start":120,"line_end":120,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31313,"byte_end":31322,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":51},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32254,"byte_end":32267,"line_start":151,"line_end":151,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::new::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":63},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":81}],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends `Write` with methods for writing numbers. (For `std::io`.)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31629,"byte_end":31699,"line_start":133,"line_end":133,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31700,"byte_end":31703,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31704,"byte_end":31782,"line_start":135,"line_end":135,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31783,"byte_end":31861,"line_start":136,"line_end":136,"column_start":1,"column_end":79}},{"value":"/ the `BigEndian` or `LittleEndian` types defined in this crate.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31862,"byte_end":31928,"line_start":137,"line_end":137,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31929,"byte_end":31932,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31933,"byte_end":31947,"line_start":139,"line_end":139,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31948,"byte_end":31951,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ Write unsigned 16 bit big-endian integers to a `Write`:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31952,"byte_end":32011,"line_start":141,"line_end":141,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32012,"byte_end":32015,"line_start":142,"line_end":142,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32016,"byte_end":32027,"line_start":143,"line_end":143,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32028,"byte_end":32074,"line_start":144,"line_end":144,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32075,"byte_end":32078,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ let mut wtr = vec![];","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32079,"byte_end":32104,"line_start":146,"line_end":146,"column_start":1,"column_end":26}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32105,"byte_end":32150,"line_start":147,"line_end":147,"column_start":1,"column_end":46}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32151,"byte_end":32196,"line_start":148,"line_end":148,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(wtr, vec![2, 5, 3, 0]);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32197,"byte_end":32235,"line_start":149,"line_end":149,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32236,"byte_end":32243,"line_start":150,"line_end":150,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32505,"byte_end":32513,"line_start":157,"line_end":157,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::new::WriteBytesExt::write_u8","value":"pub fn write_u8(&mut Self, u8) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 8 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32285,"byte_end":32347,"line_start":152,"line_end":152,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32352,"byte_end":32355,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32360,"byte_end":32432,"line_start":154,"line_end":154,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32437,"byte_end":32483,"line_start":155,"line_end":155,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32488,"byte_end":32497,"line_start":156,"line_end":156,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32805,"byte_end":32813,"line_start":166,"line_end":166,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::new::WriteBytesExt::write_i8","value":"pub fn write_i8(&mut Self, i8) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 8 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32588,"byte_end":32647,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32652,"byte_end":32655,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32660,"byte_end":32732,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32737,"byte_end":32783,"line_start":164,"line_end":164,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32788,"byte_end":32797,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32979,"byte_end":32988,"line_start":172,"line_end":172,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::new::WriteBytesExt::write_u16","value":"pub fn write_u16<T: ByteOrder>(&mut Self, u16) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32894,"byte_end":32957,"line_start":170,"line_end":170,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32962,"byte_end":32971,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33225,"byte_end":33234,"line_start":180,"line_end":180,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::new::WriteBytesExt::write_i16","value":"pub fn write_i16<T: ByteOrder>(&mut Self, i16) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33143,"byte_end":33203,"line_start":178,"line_end":178,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33208,"byte_end":33217,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33474,"byte_end":33483,"line_start":188,"line_end":188,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::new::WriteBytesExt::write_u32","value":"pub fn write_u32<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33389,"byte_end":33452,"line_start":186,"line_end":186,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33457,"byte_end":33466,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33720,"byte_end":33729,"line_start":196,"line_end":196,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::new::WriteBytesExt::write_i32","value":"pub fn write_i32<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33638,"byte_end":33698,"line_start":194,"line_end":194,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33703,"byte_end":33712,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33969,"byte_end":33978,"line_start":204,"line_end":204,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::new::WriteBytesExt::write_u64","value":"pub fn write_u64<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33884,"byte_end":33947,"line_start":202,"line_end":202,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":33952,"byte_end":33961,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34215,"byte_end":34224,"line_start":212,"line_end":212,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::new::WriteBytesExt::write_i64","value":"pub fn write_i64<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34133,"byte_end":34193,"line_start":210,"line_end":210,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34198,"byte_end":34207,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34618,"byte_end":34628,"line_start":223,"line_end":223,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::new::WriteBytesExt::write_uint","value":"pub fn write_uint<T: ByteOrder>(&mut Self, u64, usize) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34379,"byte_end":34443,"line_start":218,"line_end":218,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34448,"byte_end":34451,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34456,"byte_end":34531,"line_start":220,"line_end":220,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34536,"byte_end":34596,"line_start":221,"line_end":221,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34601,"byte_end":34610,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35085,"byte_end":35094,"line_start":238,"line_end":238,"column_start":8,"column_end":17},"name":"write_int","qualname":"::new::WriteBytesExt::write_int","value":"pub fn write_int<T: ByteOrder>(&mut Self, i64, usize) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34849,"byte_end":34910,"line_start":233,"line_end":233,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34915,"byte_end":34918,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":34923,"byte_end":34998,"line_start":235,"line_end":235,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35003,"byte_end":35063,"line_start":236,"line_end":236,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35068,"byte_end":35077,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35439,"byte_end":35448,"line_start":251,"line_end":251,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::new::WriteBytesExt::write_f32","value":"pub fn write_f32<T: ByteOrder>(&mut Self, f32) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number to","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35314,"byte_end":35386,"line_start":248,"line_end":248,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35391,"byte_end":35417,"line_start":249,"line_end":249,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35422,"byte_end":35431,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35728,"byte_end":35737,"line_start":260,"line_end":260,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::new::WriteBytesExt::write_f64","value":"pub fn write_f64<T: ByteOrder>(&mut Self, f64) -> Result<()>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number to","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35603,"byte_end":35675,"line_start":257,"line_end":257,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35680,"byte_end":35706,"line_start":258,"line_end":258,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":35711,"byte_end":35720,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":89},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3096,"byte_end":3105,"line_start":121,"line_end":121,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[{"value":"/ ByteOrder describes types that can serialize integers as bytes.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2172,"byte_end":2239,"line_start":91,"line_end":91,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2240,"byte_end":2243,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ Note that `Self` does not appear anywhere in this trait's definition!","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2244,"byte_end":2317,"line_start":93,"line_end":93,"column_start":1,"column_end":74}},{"value":"/ Therefore, in order to use it, you'll need to use syntax like","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2318,"byte_end":2383,"line_start":94,"line_end":94,"column_start":1,"column_end":66}},{"value":"/ `T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2384,"byte_end":2444,"line_start":95,"line_end":95,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2445,"byte_end":2448,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This crate provides two types that implement `ByteOrder`: `BigEndian`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2449,"byte_end":2522,"line_start":97,"line_end":97,"column_start":1,"column_end":74}},{"value":"/ and `LittleEndian`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2523,"byte_end":2546,"line_start":98,"line_end":98,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2547,"byte_end":2550,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2551,"byte_end":2565,"line_start":100,"line_end":100,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2566,"byte_end":2569,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2570,"byte_end":2626,"line_start":102,"line_end":102,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2627,"byte_end":2630,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2631,"byte_end":2642,"line_start":104,"line_end":104,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2643,"byte_end":2688,"line_start":105,"line_end":105,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2689,"byte_end":2692,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2693,"byte_end":2718,"line_start":107,"line_end":107,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2719,"byte_end":2768,"line_start":108,"line_end":108,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2769,"byte_end":2825,"line_start":109,"line_end":109,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2826,"byte_end":2833,"line_start":110,"line_end":110,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2834,"byte_end":2837,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2838,"byte_end":2891,"line_start":112,"line_end":112,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2892,"byte_end":2895,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2896,"byte_end":2907,"line_start":114,"line_end":114,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2908,"byte_end":2950,"line_start":115,"line_end":115,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2951,"byte_end":2954,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2955,"byte_end":2980,"line_start":117,"line_end":117,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -50_000);","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":2981,"byte_end":3025,"line_start":118,"line_end":118,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(-50_000, BigEndian::read_i16(&buf));","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3026,"byte_end":3077,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3078,"byte_end":3085,"line_start":120,"line_end":120,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3213,"byte_end":3221,"line_start":125,"line_end":125,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"pub fn read_u16(&[u8]) -> u16","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3112,"byte_end":3160,"line_start":122,"line_end":122,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3165,"byte_end":3168,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3173,"byte_end":3205,"line_start":124,"line_end":124,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3348,"byte_end":3356,"line_start":130,"line_end":130,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"pub fn read_u32(&[u8]) -> u32","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3247,"byte_end":3295,"line_start":127,"line_end":127,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3300,"byte_end":3303,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3308,"byte_end":3340,"line_start":129,"line_end":129,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3483,"byte_end":3491,"line_start":135,"line_end":135,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"pub fn read_u64(&[u8]) -> u64","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3382,"byte_end":3430,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3435,"byte_end":3438,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3443,"byte_end":3475,"line_start":134,"line_end":134,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3663,"byte_end":3672,"line_start":141,"line_end":141,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"pub fn read_uint(&[u8], usize) -> u64","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3517,"byte_end":3566,"line_start":137,"line_end":137,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3571,"byte_end":3574,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3579,"byte_end":3626,"line_start":139,"line_end":139,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3631,"byte_end":3655,"line_start":140,"line_end":140,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3817,"byte_end":3826,"line_start":146,"line_end":146,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"pub fn write_u16(&mut [u8], u16)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3713,"byte_end":3764,"line_start":143,"line_end":143,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3769,"byte_end":3772,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3777,"byte_end":3809,"line_start":145,"line_end":145,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3961,"byte_end":3970,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"pub fn write_u32(&mut [u8], u32)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3857,"byte_end":3908,"line_start":148,"line_end":148,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3913,"byte_end":3916,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":3921,"byte_end":3953,"line_start":150,"line_end":150,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4105,"byte_end":4114,"line_start":156,"line_end":156,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"pub fn write_u64(&mut [u8], u64)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4001,"byte_end":4052,"line_start":153,"line_end":153,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4057,"byte_end":4060,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4065,"byte_end":4097,"line_start":155,"line_end":155,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4332,"byte_end":4342,"line_start":162,"line_end":162,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"pub fn write_uint(&mut [u8], u64, usize)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4145,"byte_end":4209,"line_start":158,"line_end":158,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4214,"byte_end":4217,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4222,"byte_end":4296,"line_start":160,"line_end":160,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4301,"byte_end":4324,"line_start":161,"line_end":161,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4500,"byte_end":4508,"line_start":168,"line_end":168,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"pub fn read_i16(&[u8]) -> i16","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4388,"byte_end":4433,"line_start":164,"line_end":164,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4438,"byte_end":4441,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4446,"byte_end":4478,"line_start":166,"line_end":166,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4483,"byte_end":4492,"line_start":167,"line_end":167,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4688,"byte_end":4696,"line_start":176,"line_end":176,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"pub fn read_i32(&[u8]) -> i32","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4576,"byte_end":4621,"line_start":172,"line_end":172,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4626,"byte_end":4629,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4634,"byte_end":4666,"line_start":174,"line_end":174,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4671,"byte_end":4680,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4876,"byte_end":4884,"line_start":184,"line_end":184,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"pub fn read_i64(&[u8]) -> i64","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4764,"byte_end":4809,"line_start":180,"line_end":180,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4814,"byte_end":4817,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4822,"byte_end":4854,"line_start":182,"line_end":182,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4859,"byte_end":4868,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5109,"byte_end":5117,"line_start":193,"line_end":193,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"pub fn read_int(&[u8], usize) -> i64","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":4952,"byte_end":4998,"line_start":188,"line_end":188,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5003,"byte_end":5006,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5011,"byte_end":5058,"line_start":190,"line_end":190,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5063,"byte_end":5087,"line_start":191,"line_end":191,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5092,"byte_end":5101,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5359,"byte_end":5367,"line_start":201,"line_end":201,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"pub fn read_f32(&[u8]) -> f32","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5223,"byte_end":5292,"line_start":197,"line_end":197,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5297,"byte_end":5300,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5305,"byte_end":5337,"line_start":199,"line_end":199,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5342,"byte_end":5351,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5586,"byte_end":5594,"line_start":209,"line_end":209,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"pub fn read_f64(&[u8]) -> f64","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5450,"byte_end":5519,"line_start":205,"line_end":205,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5524,"byte_end":5527,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5532,"byte_end":5564,"line_start":207,"line_end":207,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5569,"byte_end":5578,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5792,"byte_end":5801,"line_start":217,"line_end":217,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"pub fn write_i16(&mut [u8], i16)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5677,"byte_end":5725,"line_start":213,"line_end":213,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5730,"byte_end":5733,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5738,"byte_end":5770,"line_start":215,"line_end":215,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5775,"byte_end":5784,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5993,"byte_end":6002,"line_start":225,"line_end":225,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"pub fn write_i32(&mut [u8], i32)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5878,"byte_end":5926,"line_start":221,"line_end":221,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5931,"byte_end":5934,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5939,"byte_end":5971,"line_start":223,"line_end":223,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":5976,"byte_end":5985,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6194,"byte_end":6203,"line_start":233,"line_end":233,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"pub fn write_i64(&mut [u8], i64)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer `n` to `buf`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6079,"byte_end":6127,"line_start":229,"line_end":229,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6132,"byte_end":6135,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6140,"byte_end":6172,"line_start":231,"line_end":231,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6177,"byte_end":6186,"line_start":232,"line_end":232,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6478,"byte_end":6487,"line_start":242,"line_end":242,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"pub fn write_int(&mut [u8], i64, usize)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6280,"byte_end":6341,"line_start":237,"line_end":237,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6346,"byte_end":6349,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6354,"byte_end":6428,"line_start":239,"line_end":239,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6433,"byte_end":6456,"line_start":240,"line_end":240,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6461,"byte_end":6470,"line_start":241,"line_end":241,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6741,"byte_end":6750,"line_start":250,"line_end":250,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"pub fn write_f32(&mut [u8], f32)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6604,"byte_end":6674,"line_start":246,"line_end":246,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6679,"byte_end":6682,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6687,"byte_end":6719,"line_start":248,"line_end":248,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6724,"byte_end":6733,"line_start":249,"line_end":249,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6979,"byte_end":6988,"line_start":258,"line_end":258,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"pub fn write_f64(&mut [u8], f64)","parent":{"krate":0,"index":89},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6842,"byte_end":6912,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6917,"byte_end":6920,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6925,"byte_end":6957,"line_start":256,"line_end":256,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":6962,"byte_end":6971,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7259,"byte_end":7268,"line_start":267,"line_end":267,"column_start":49,"column_end":58},"name":"BigEndian","qualname":"::BigEndian","value":"pub enum BigEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"/ Defines big-endian serialization.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7078,"byte_end":7115,"line_start":263,"line_end":263,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7116,"byte_end":7119,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7120,"byte_end":7194,"line_start":265,"line_end":265,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7195,"byte_end":7210,"line_start":266,"line_end":266,"column_start":1,"column_end":16}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7211,"byte_end":7249,"line_start":267,"line_end":267,"column_start":1,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7457,"byte_end":7469,"line_start":273,"line_end":273,"column_start":49,"column_end":61},"name":"LittleEndian","qualname":"::LittleEndian","value":"pub enum LittleEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"/ Defines little-endian serialization.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7273,"byte_end":7313,"line_start":269,"line_end":269,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7314,"byte_end":7317,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7318,"byte_end":7392,"line_start":271,"line_end":271,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7393,"byte_end":7408,"line_start":272,"line_end":272,"column_start":1,"column_end":16}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7409,"byte_end":7447,"line_start":273,"line_end":273,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7846,"byte_end":7859,"line_start":285,"line_end":285,"column_start":10,"column_end":23},"name":"NetworkEndian","qualname":"::NetworkEndian","value":"BigEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines network byte order serialization.","sig":null,"attributes":[{"value":"/ Defines network byte order serialization.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7474,"byte_end":7519,"line_start":275,"line_end":275,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7520,"byte_end":7523,"line_start":276,"line_end":276,"column_start":1,"column_end":4}},{"value":"/ Network byte order is defined by [RFC 1700][1] to be big-endian, and is","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7524,"byte_end":7599,"line_start":277,"line_end":277,"column_start":1,"column_end":76}},{"value":"/ referred to in several protocol specifications.  This type is an alias of","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7600,"byte_end":7677,"line_start":278,"line_end":278,"column_start":1,"column_end":78}},{"value":"/ BigEndian.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7678,"byte_end":7692,"line_start":279,"line_end":279,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7693,"byte_end":7696,"line_start":280,"line_end":280,"column_start":1,"column_end":4}},{"value":"/ [1]: https://tools.ietf.org/html/rfc1700","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7697,"byte_end":7741,"line_start":281,"line_end":281,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7742,"byte_end":7745,"line_start":282,"line_end":282,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7746,"byte_end":7820,"line_start":283,"line_end":283,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7821,"byte_end":7836,"line_start":284,"line_end":284,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":8059,"byte_end":8071,"line_start":292,"line_end":292,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"/ Defines system native-endian serialization.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7874,"byte_end":7921,"line_start":287,"line_end":287,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7922,"byte_end":7925,"line_start":288,"line_end":288,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":7926,"byte_end":8000,"line_start":289,"line_end":289,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":8001,"byte_end":8016,"line_start":290,"line_end":290,"column_start":1,"column_end":16}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":8017,"byte_end":8049,"line_start":291,"line_end":291,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31623,"byte_end":31624,"line_start":131,"line_end":131,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":36026,"byte_end":36027,"line_start":269,"line_end":269,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":9110,"byte_end":9119,"line_start":327,"line_end":327,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":10597,"byte_end":10609,"line_start":384,"line_end":384,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":28119,"byte_end":28123,"line_start":23,"line_end":23,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3068},"to":{"krate":0,"index":14}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":31623,"byte_end":31624,"line_start":131,"line_end":131,"column_start":45,"column_end":46},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":50},"to":{"krate":0,"index":14}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":32273,"byte_end":32278,"line_start":151,"line_end":151,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3127},"to":{"krate":0,"index":51}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\new.rs","byte_start":36026,"byte_end":36027,"line_start":269,"line_end":269,"column_start":47,"column_end":48},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":85},"to":{"krate":0,"index":51}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":9110,"byte_end":9119,"line_start":327,"line_end":327,"column_start":20,"column_end":29},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":110},"to":{"krate":0,"index":89}},{"span":{"file_name":"C:\\Users\\Administrator\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\byteorder-0.5.3\\src\\lib.rs","byte_start":10597,"byte_end":10609,"line_start":384,"line_end":384,"column_start":20,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":111},"to":{"krate":0,"index":89}}]}